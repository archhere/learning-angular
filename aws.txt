Amazon has many data centers. Each of these data center regions have availability
zones. This is so, if one zone fails, the others work. So our service is always online.
This is important, bcoz we can choose which zone we want to host our server in.

All Services
You pick the service you want and use it to solve your specific problem.

Lets start with EC2
EC2 stands for Elastic Cloud Computing. You can start virtual servers. You can start
instances , virtual instances on servers. You can define how powerful these servers should be.
You can do anything you want with these instances.You can install a web server, a php interpreter or
anything you want and host a website.


Solutions:
They make solving your problem easier, as aws helps you with it.


Lets use services:

Open services, EC2

i am  - identity and access management

dashboard:
Groups
Users
rules
Policies


Traditional                        |                           Serverless

Provision capacity                                       Runs on Demand
How much server capacity?                                Unlimited capacity (Only pay for code execution)
CPU, RAM, MEMORY                                         Scales automatically (pay what you need)
Update OS                                                Runs on managed AWS infrastructure
Lots of overhead                                         Code runs in uptodate environment. Great for SPA and APIs
Great support for full stack apps

Why do serverless:
1) No servers to provision or manage
2) Scales for usage. Lambda scales up and down based on incoming traffic without you having to worry about it.
3) You never pay for idle. You only pay when you use something.
4) Availability and fault tolerance built in.

Start:

1) search api gateway (it can also be found under networking & content delivery)
2) click on "get started"
3) select new Api
4) Give it any name and hit create API
This will create API for you.
Lambda is just a code on demand thing.
There are advanced ways of creating API, for eg by importing API definition files.
But we are focussing on basics here.

5) Click on actions and "Create Resource". For Resource Name, we can give any name
"first-api-test" and hit "create Resource"

6) We cant use the resource yet.
Lets go to actions and click "create Method."
In this case, lets choose GET.Click tick mark. Now select  "mock", click save.
Now you have created your first API end point.You will see request and response. Go to "Integration response" and click on downward arrow here.In Body Mapping template, application /json.

{"message": "This is working"}
Now save and go to actions, deploy api.
In staging, you can add dev,as this is under development. This would generate an url, open the url with api end point, first-api-test. You would get the json indicated above.


Core Serverless Services
Business Logic with Lambda and API gateway
Date Storage with DynamoDB
Authentication with cognito
Content Delivery and hosting with S3, CloudFront and Route53

Which services do we need?
Lets imagine, we have an angular app. We need to host this somewhere. A great place to host static apps, is
S3.
But for web app, we need to store and fetch data, so we need restful API. The service we need is API Gateway.
We need some service to execute code. This is why we need lambda.This is used to execute code on demand.
We also need a database. We will use DynamoDB (this is a noSQL database.)
For authenticating users, we would use cognito.We can also protect API so that only authenticated users can access
certain API end points. We also need our own url for our app. We can use Route 53 to register and configure our own
domain so that whenever we receive a request to this domain, we can load our s3 bucket for this.
Cache - Cloudfront for caching. To improve performance, so that people using our app all over the world will have better performance.
We will build our own serverless App
1) We will have some API gateways
2) We will have some Lambda functions to execute this code.
3) We will also have a database DynamoDB
4) s3 is simple storage service


Application                 -->         Rest API     -->                Action

Web App (eg: Angular App)            Define API end points              Directly access some AWS services
Mobile App                           & HTTP Methods(eg: POST/book)
Other Source (eg: POSTMAN)              Authorize Access                Run Lambda Code (and forward Request Data)

Stages are like deployed snapshots of your API.

End point has 2features - path and type of request

METHOD REQUEST:

Handles incoming request and makes sure it has certain data and certain shape.

INTEGRATION REQUEST:

Is to trigger the end point , using mock or langda
It also extracts data and passes it on to the end point.
So, it transforms and extracts data.


METHOD RESPONSE:

Defines the Shape of our response

Response header and Response Body.

INTEGRATION RESPONSE:

Fills that shape with life.Its non-binding.

Swagger definition file:

Import a swagger text


Configure a proxy resource:
This means that this acts as a single catch-all resource to catch all our responses.
If you catch all incoming requests and methods and forward them to and forward them to
whichever action you are executing, this action can be a lambda function.
Now, since lambda supports Node and Express, you can use this lambda function,
and basically create a full stack approach using serverless approach using this.

API gateway CORS:
To understand this, we need to know what CORS is.
Cross Origin Resource Sharing. It is a security model that prevents another server from accessing our server.

Lambda:

AWS Lambda is a a service which allows you to host your code on it and run it in certain  events.

Event Source                ----> Code (written in nodejs python, java or C# )

S3(EG: FILE could trigger a lambda function, which could transform it (compress it analyse it etc))
Cloudwatch (scheduled)
API Gateway (HTTP request)

Result:  Interact with other AWS services
Return Response


Examples:

FINRA, Product Insight(no action required to handle fluctuations in scale)

ALM for serverless applications:
author, build, test, deploy

there are 2 flows here - author, test, debug loop (this loop can go on for ever)

New and improved lambda console:
Cloud9 editor within the Lambda console
Function graph
Persisted test events
Monitoring view (jump to logs for any timeframe)
Invent

CI/CD:
Source, Build


Lambda console Editor shortcuts:

Full Screen Cmd + Shift + F
Cache file locally Cmd + S
Save (UpdateFunctionCode) Cmd + Shift + U
Test Cmd + I
Configure test events Cmd + J


Meet SAM : Serverless Application Model
Cloud Formation:

Cloud formation is our service for provisioning and managing a collection of related AWS services.
Our application = cloud formation stack
Input.yaml file and output provisioned AWS resources.
Cloud formation was created for infrastructure rather than for serverless functions.
